/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        
        
        ListNode slow = head;
        ListNode fast = head;
        
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        if (fast != null) {
            slow = slow.next;
        }
        
        
        //this gets the middle of the linked list
        //now reverse the 2nd half and iterate to compare each side
        
        slow = reverse(slow);
        fast = head;
        while (slow != null && fast != null) {
            if (slow.val == fast.val) {
                slow = slow.next;
                fast = fast.next;
            }
            else {
                return false;
            }
        }
        return true; 
    }


    public ListNode reverse(ListNode head) {
        
        ListNode prev = null;
        ListNode curr = head;
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next; 
        }
        return prev;
    }
    
}
